<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sample on 璇玑</title><link>https://liwuhen.cn/tags/sample/</link><description>Recent content in Sample on 璇玑</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 26 Jan 2024 15:40:57 +0000</lastBuildDate><atom:link href="https://liwuhen.cn/tags/sample/index.xml" rel="self" type="application/rss+xml"/><item><title>C++预处理</title><link>https://liwuhen.cn/programming_languages/c++%E9%A2%84%E5%A4%84%E7%90%86/</link><pubDate>Fri, 26 Jan 2024 15:40:57 +0000</pubDate><guid>https://liwuhen.cn/programming_languages/c++%E9%A2%84%E5%A4%84%E7%90%86/</guid><description>一 宏定义 1.1 无参数的宏定义(宏常量) 如果在程序中大量使用到了100这个值，那么为了方便管理，我们可以将其定义为： const int num = 100; 但是如果我们使用num定义一个数组，在不支持c99标准的编译器上是不支持的，因为num不是一个编译器常量，如果想得到了一个编译器常量，那么可以使用： #define num 100
在编译预处理时，将程序中在该语句以后出现的所有的num都用100代替。这种方法使用户能以一个简单的名字代替一个长的字符串，在预编译时将宏名替换成字符串的过程称为“宏展开”。
宏定义，只在宏定义的文件中起作用。
说明： 1) 宏名一般用大写，以便于与变量区别； 2) 宏定义可以是常数、表达式等； 3) 宏定义不作语法检查，只有在编译被宏展开后的源程序才会报错； 4) 宏定义不是C语言，不在行末加分号； 5) 宏名有效范围为从定义到本源文件结束； 6) 可以用#undef命令终止宏定义的作用域； 7) 在宏定义中，可以引用已定义的宏名； Show Code #define PI 3.1415 void test(){ double r = 10.0; double s = PI * r * r; printf(&amp;#34;s = %lf\n&amp;#34;, s); } 1.2 带参数的宏定义(宏函数) 在项目中，经常把一些短小而又频繁使用的函数写成宏函数，这是由于宏函数没有普通函数参数压栈、跳转、返回等的开销，可以调高程序的效率。
宏通过使用参数，可以创建外形和作用都与函数类似地类函数宏(function-like macro). 宏的参数也用圆括号括起来。
很显然，我们不会选择用函数来完成这个任务，原因有两个：首先，函数调用会带来额外的开销，它需要开辟一片栈空间，记录返回地址，将形参压栈，从函数返回还要释放堆栈。这种开销不仅会降低代码效率，而且代码量也会大大增加，而使用宏定义则在代码规模和速度方面都比函数更胜一筹；其次，函数的参数必须被声明为一种特定的类型，所以它只能在类型合适的表达式上使用，我们如果要比较两个浮点型的大小，就不得不再写一个专门针对浮点型的比较函数。反之，上面的那个宏定义可以用于整形、长整形、单浮点型、双浮点型以及其他任何可以用“&amp;gt;”操作符比较值大小的类型，也就是说，宏是与类型无关的。
注意: 1) 宏的名字中不能有空格，但是在替换的字符串中可以有空格。ANSI C允许在参数列表中使用空格； 2) 用括号括住每一个参数，并括住宏的整体定义。 3) 用大写字母表示宏的函数名。 4) 如果打算宏代替函数来加快程序运行速度。假如在程序中只使用一次宏对程序的运行时间没有太大提高。 Show Code #define SUM(x,y) (( x )+( y )) void test(){ //仅仅只是做文本替换 下例替换为 int ret = ((10)+(20)); //不进行计算 int ret = SUM(10, 20); printf(&amp;#34;ret:%d\n&amp;#34;,ret); } #define SUM(x,y) (( x )+( y )) void test(){ //仅仅只是做文本替换 下例替换为 int ret = ((10)+(20)); //不进行计算 int ret = SUM(10, 20); printf(&amp;#34;ret:%d\n&amp;#34;,ret); } 1.</description></item><item><title>C++基础知识</title><link>https://liwuhen.cn/programming_languages/c++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Tue, 23 Jan 2024 10:28:54 +0000</pubDate><guid>https://liwuhen.cn/programming_languages/c++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>一 命名空间 1.1 命名空间概念 命名空间为了防止名字冲突而引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，名字可以不同。大家可以把命名空间看成一个作用域，我们在这个命名空间里定义函数，和另一个命名空间中函数即便同名，也不影响。
(1) 命名空间定义： namespace 命名空间名{ ...... } (2) 命名空间的定义可以不连续，甚至可以写在多个文件中。 (3) 外界如何访问命名空间中的函数? 格式：命名空间名::实体名 ----其中这::叫 ‘作用于运算符’ Show Code #include &amp;lt;iostream&amp;gt; #include &amp;#34;project3.hpp&amp;#34; namespace zhangsan { void radius() { printf(&amp;#34;shangsan 的radius()函数&amp;#34;); } } int main() { zhangsan::radius(); lisi::radius(); return 0; // main()中返回值一般表示状态，返回0表示成功，非0一般不表示错误 } 二 输入输出流 2.1 基本的输入输出流 c++中我们不是用printf，使用cout,c++的标准库 (1) std:: 命名空间，标准库的命名空间 (2) std::endl 作用： a) 输出换行符 \n b) 强制刷新输出缓冲区，缓冲区的所有数据都被系统清除。 (3) std::cin 基本输入 &amp;raquo;输入运算符 &amp;laquo;输出运算符
Show Code #include &amp;lt;iostream&amp;gt; #include &amp;#34;project3.</description></item></channel></rss>