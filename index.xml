<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>璇玑</title><link>https://liwuhen.github.io/</link><description>Recent content on 璇玑</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 23 Jan 2024 10:28:54 +0000</lastBuildDate><atom:link href="https://liwuhen.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>C++基础知识</title><link>https://liwuhen.github.io/programming_languages/c++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Tue, 23 Jan 2024 10:28:54 +0000</pubDate><guid>https://liwuhen.github.io/programming_languages/c++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>1.1 命名空间 一、命名空间概念 命名空间为了防止名字冲突而引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，名字可以不同。大家可以把命名空间看成一个作用域，我们在这个命名空间里定义函数，和另一个命名空间中函数即便同名，也不影响。
(1) 命名空间定义： namespace 命名空间名{ ...... } (2) 命名空间的定义可以不连续，甚至可以写在多个文件中。 (3) 外界如何访问命名空间中的函数? 格式：命名空间名::实体名 ----其中这::叫 ‘作用于运算符’ Show Code #include &amp;lt;iostream&amp;gt; #include &amp;#34;project3.hpp&amp;#34; namespace zhangsan { void radius() { printf(&amp;#34;shangsan 的radius()函数&amp;#34;); } } int main() { zhangsan::radius(); lisi::radius(); return 0; // main()中返回值一般表示状态，返回0表示成功，非0一般不表示错误 } 1.2 输入输出流 二、基本的输入输出流 c++中我们不是用printf，使用cout,c++的标准库 (1) std:: 命名空间，标准库的命名空间 (2) std::endl 作用： a) 输出换行符 \n b) 强制刷新输出缓冲区，缓冲区的所有数据都被系统清除。 (3) std::cin 基本输入 &amp;raquo;输入运算符 &amp;laquo;输出运算符
Show Code #include &amp;lt;iostream&amp;gt; #include &amp;#34;project3.hpp&amp;#34; int main() { std::cout&amp;lt;&amp;lt;&amp;#34;testing&amp;#34;&amp;lt;&amp;lt; std::endl; return 0; // main()中返回值一般表示状态，返回0表示成功，非0一般不表示错误 } 1.</description></item><item><title>Parking_slot_detect</title><link>https://liwuhen.github.io/parking/parking_slot_detect/</link><pubDate>Sat, 20 Jan 2024 06:37:29 +0000</pubDate><guid>https://liwuhen.github.io/parking/parking_slot_detect/</guid><description>车位角点检测模型 布式系列的第三篇博客中，简单探讨了有关“分布式互斥”的相关知识，也从中领悟了”有你没我，有我没你“的设计精髓。分布式互斥算法主要是为了解决同一临界资源同一时刻只能被一个程序访问的问题。
如果进一步思考可以发现，在之前介绍的算法中，主要讲了如何协调多个进程获取权限和根据权限有序访问共享资源，“获得访问权限的进程可以访问共享资源，其他进程必须等待拥有该权限的进程释放权限”。但是，并没有介绍在访问共享资源时，这个权限是如何设置或产生的，以及设置或产生这个权限的工作原理是什么。
那么，就带着好奇心，一起来看看分布式锁是如何解决这个问题的。
分布式锁的用途 首先，我们需要重新认识一下什么是“锁”。
在单机系统中，经常会有多个线程访问同一种资源的情况，按照习惯，我们把这样的资源叫作共享资源，或者临界资源。为了维护线程操作的有效性和正确性，自然而就需要某种机制来减少低效率的操作，避免同时对相同的数据进行不一样的操作，要维护数据的一致性，防止数据脏读和数据丢失等。也就是说，我们需要一种互斥机制，按照某种规则对多个线程进行排队，依次、互不干扰地访问共享资源。
这个机制指的是，为了实现分布式互斥，在某个地方做标记，这个标记每个线程都能看到，到标记不存在时可以设置该标记，当标记被设置后，其他线程只能等待拥有该标记的线程执行完成，并释放该标记后，才能去设置该标记和访问共享资源。这个标记也就是我们常常说的锁。
简单来说，锁是多线程同时访问同一资源的场景下，为了让线程互不干扰地访问共享资源，从而保证操作的有效性和正确性的一种标记。
与普通锁不同的是，分布式锁是指分布式环境下，系统部署在多个机器中，实现多进程分布式互斥的一种锁。为了保证多个进程能看到锁，锁被存在公共存储（比如 Redis、Memcached 等三方存储中），以实现多个进程并发访问同一共享资源，同一时刻只有一个进程可以访问共享资源，确保数据的一致性。</description></item><item><title>First</title><link>https://liwuhen.github.io/noa/first/</link><pubDate>Sat, 20 Jan 2024 05:38:26 +0000</pubDate><guid>https://liwuhen.github.io/noa/first/</guid><description>NOA Test Test01 This is a test.</description></item></channel></rss>